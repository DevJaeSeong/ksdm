package egovframework.ksdmWeb.admin.adminInsectInfo.service.impl;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import egovframework.ksdmWeb.admin.adminInsectInfo.service.AdminInsectInfoService;
import egovframework.ksdmWeb.common.paging.PagingMaker;
import egovframework.ksdmWeb.common.service.impl.CommonDataMapper;
import egovframework.ksdmWeb.common.util.fileUpload.FileManager;
import egovframework.ksdmWeb.common.util.fileUpload.FilePathHolder;
import egovframework.ksdmWeb.common.vo.InsectStatusVo;
import egovframework.ksdmWeb.common.vo.InsectVo;
import lombok.extern.slf4j.Slf4j;

@Service("adminInsectInfoService")
@Slf4j
public class AdminInsectInfoServiceImpl implements AdminInsectInfoService {
	
	@Resource(name = "adminInsectInfoMapper")
	private AdminInsectInfoMapper adminInsectInfoMapper; 
	
	@Resource(name = "commonDataMapper")
	private CommonDataMapper commonDataMapper;
	
	@Resource(name = "pagingMaker")
	private PagingMaker pagingMaker;
	
	@Resource(name = "fileManager")
	private FileManager fileManager;
	
	@Override
	public Map<String, Object> insectRegistConfirm(InsectVo insectVo, List<String> insectStatusList) {
		log.debug("insectRegistConfirm() 시작");
		
		Map<String, Object> result = new HashMap<String, Object>();
		MultipartFile file = insectVo.getFile();
		
		if (file != null) {
			
			String savedFileName = fileManager.fileUpload(file, FilePathHolder.INSECT_IMG_PATH);
			
			if (savedFileName == null) {
				
				result.put("result", "uploadFail");
				log.debug("boardRegistConfirm() 끝");
				return result;
			}
			
			insectVo.setSavedFileName(savedFileName);
		}
		
		try {
			
			insectVo.setRegId(SecurityContextHolder.getContext().getAuthentication().getName());
			adminInsectInfoMapper.insertInsectInfo(insectVo);
			
			insertInsectStatus(insectVo, insectStatusList.get(0));
			
			result.put("result", "success");
			
		} catch (Exception e) {

			result.put("result", "fail");
			log.error("DB에러");
			e.printStackTrace();
		}
		
		log.debug("boardRegistConfirm() 끝");
		return result;
	}

	@Override
	public Map<String, Object> insectModifyConfirm(InsectVo insectVo, List<String> insectStatusList) {
		log.debug("insectModifyConfirm() 시작");
		
		Map<String, Object> result = new HashMap<String, Object>();
		MultipartFile file = insectVo.getFile();
		
		if (file != null) {
			
			fileManager.deleteFileBySavedFileName(insectVo.getOldSavedFileName());
			
			String savedFileName = fileManager.fileUpload(file, FilePathHolder.INSECT_IMG_PATH);
			
			if (savedFileName == null) {
				
				result.put("result", "uploadFail");
				log.debug("insectModifyConfirm() 끝");
				return result;
			}
			
			insectVo.setSavedFileName(savedFileName);
			insectVo.setOriFileName(file.getOriginalFilename());
		}
		
		try {
			
			insectVo.setModId(SecurityContextHolder.getContext().getAuthentication().getName());
			adminInsectInfoMapper.modifyInsectInfo(insectVo);
			
			adminInsectInfoMapper.deleteInsectStatus(insectVo.getInsectNum());
			insertInsectStatus(insectVo, insectStatusList.get(0));
			
			result.put("result", "success");
			
		} catch (Exception e) {

			log.error("DB에러");
			e.printStackTrace();
			result.put("result", "fail");
		}
		
		log.debug("insectModifyConfirm() 끝");
		return result;
	}
	
	private void insertInsectStatus(InsectVo insectVo, String insectStatusList) {
		log.debug("insertInsectStatus() 시작");
		log.debug("<== {}", insectStatusList);

		List<String> statusList = Arrays.asList(insectStatusList.split(","));
		
		for (String statusCode : statusList) {
			
			InsectStatusVo insectStatusVo = new InsectStatusVo();
			insectStatusVo.setInsectStatusCode(statusCode);
			insectStatusVo.setInsectNum(insectVo.getInsectNum());
			
			try {
				
				adminInsectInfoMapper.insertInsectStatus(insectStatusVo);
				
			} catch (Exception e) {
				
				log.error("DB에러");
				e.printStackTrace();
				break;
			}
		}
		
		log.debug("insertInsectStatus() 끝");
	}

	@Override
	public Map<String, Object> deleteInsectByInsectNum(String insectNum) {
		log.debug("deleteInsectImage() 시작");
		
		Map<String, Object> result = new HashMap<String, Object>();
		InsectVo insectVo = new InsectVo();
		
		try {
			
			insectVo = commonDataMapper.getInsectByinsectNum(insectNum);
			adminInsectInfoMapper.deleteInsectStatus(insectNum);
			adminInsectInfoMapper.deleteInsectInfo(insectNum);
			
			if (insectVo != null) {
				
				fileManager.deleteFile(insectVo.getSavedFileName(), insectVo.getFilePath());
			}
			
			result.put("result", "success");
			
		} catch (Exception e) {
			
			log.error("DB에러");
			e.printStackTrace();
			result.put("result", "fail");
		}
		
		log.debug("deleteInsectImage() 끝");
		return result;
	}
}
