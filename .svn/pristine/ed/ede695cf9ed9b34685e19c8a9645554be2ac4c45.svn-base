package egovframework.ksdmWeb.common.util.excel;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;

import javax.xml.parsers.SAXParserFactory;

import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.xssf.eventusermodel.ReadOnlySharedStringsTable;
import org.apache.poi.xssf.eventusermodel.XSSFReader;
import org.apache.poi.xssf.eventusermodel.XSSFSheetXMLHandler;
import org.apache.poi.xssf.model.StylesTable;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;

import lombok.extern.slf4j.Slf4j;

@Component("excelProcessor")
@Slf4j
public class ExcelProcessor {
	
	/**
	 * 엑셀파일을 읽고 한 시트의 데이터를 {@link ExcelSheetHandler}객체를 생성에 저장하고 해당 객체들을 List에 담아 반환
	 * @param multipartFile 엑셀파일
	 * @return 한 시트의 데이터를 담고있는 객체를 모아둔 List
	 * @throws Exception
	 */
    public List<ExcelSheetHandler> readSheets(MultipartFile multipartFile) throws Exception {
    	log.debug("readSheets() 시작");

    	File file = convertMultipartFileToFile(multipartFile);
    	
        List<ExcelSheetHandler> sheetHandlers = new ArrayList<ExcelSheetHandler>();
        OPCPackage opc = null;
        
        try {

        	// Open XML Package(.xlsx, .docx, .pptx 등과 같은 Office 문서) 파일 열기.
            opc = OPCPackage.open(file);

            // Excel 2007 이상의 .xlsx 파일 읽기.
            XSSFReader xssfReader = new XSSFReader(opc);

            // Excel 파일의 스타일 정보(폰트, 색상, 테두리, 셀 형식 등)를 가져오기.
            StylesTable styles = xssfReader.getStylesTable();

            // 공유 문자열 테이블(Excel 파일 내 동일한 문자열이 반복될때 참조하는 테이블) 가져오기.
            ReadOnlySharedStringsTable strings = new ReadOnlySharedStringsTable(opc);

            // 모든 시트를 가져옴
            XSSFReader.SheetIterator sheets = (XSSFReader.SheetIterator) xssfReader.getSheetsData();

            // 시트 수만큼 반복
            while (sheets.hasNext()) {
            	
            	InputStream inputStream = sheets.next();
            	
            	try {
            		
            		InputSource inputSource = new InputSource(inputStream);

                	// 파싱한 데이터가 저장되는 클래스.
                    ExcelSheetHandler excelSheetHandler = new ExcelSheetHandler();
                    
                    SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
                    saxParserFactory.setNamespaceAware(true);
                    
                    XMLReader xmlReader = saxParserFactory.newSAXParser().getXMLReader();
                    xmlReader.setContentHandler(new XSSFSheetXMLHandler(styles, strings, excelSheetHandler, false));

                    // 시트 파싱. (파싱된 데이터는 excelSheetHandler에 저장됨)
                    xmlReader.parse(inputSource);
                    
                    sheetHandlers.add(excelSheetHandler);
                    log.debug("{}번째 시트를 읽음.", sheetHandlers.size());
            		
            	} finally {
            		
                    if (inputStream != null) {
                    	
                        try {
                        	
                            inputStream.close();
                            
                        } catch (IOException e) {
                        	
                            log.error("InputStream close 실패");
                            e.printStackTrace();
                        }
                    }
            	}
            }

        } catch (Exception e) {
        	
        	throw e;
        	
        } finally {
			
            if (opc != null) {
            	
                try {
                	
                    opc.close();
                    
                } catch (IOException e) {
                	
                    log.error("OPCPackage close 실패");
                    e.printStackTrace();
                }
            }
		}

        log.debug("readSheets() 끝");
        return sheetHandlers;
    }
    
    /**
     * {@link MultipartFile} -> {@link File} 으로 변환
     * @param multipartFile 변환할 MultipartFile
     * @return 성공시 변환된 File, 실패시 null
     */
    private File convertMultipartFileToFile(MultipartFile multipartFile) {
    	log.debug("<== {}", multipartFile);
    	
        File file = new File(multipartFile.getOriginalFilename());
        
        try (FileOutputStream outputStream = new FileOutputStream(file);) {
			
        	outputStream.write(multipartFile.getBytes());
        	
		} catch (Exception e) {

			file = null;
			log.error("MultipartFile -> File 변환 중 에러발생.");
			e.printStackTrace();
		}
        
        log.debug("==> {}", file);
        return file;
    }
}
