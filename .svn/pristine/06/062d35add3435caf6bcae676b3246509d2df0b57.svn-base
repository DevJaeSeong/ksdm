package egovframework.ksdmWeb.security;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

/**
 * 사용자 인증에 관련된 로직을 수행하는 클래스.
 */
@Component("userAuthenticator")
@Slf4j
public class UserAuthenticator {

	@Resource(name = "authenticationManager")
	private AuthenticationManager authenticationManager;
	
	@Resource(name = "securityMapper")
	private SecurityMapper securityMapper;
	
	@Resource(name = "passwordEncoder")
	private PasswordEncoder passwordEncoder;
	
	/**
	 * 사용자가 입력한 아이디, 패스워드를 가지고 사용자 인증을 진행<p>
	 * 진행 순서:
	 * <p>
	 * 1. 인증 진행. (실패시 Exception 발생)</br>
	 * 2. 기존 세션을 만료 하고 새로운 세션 생성. (세션 고정 보호)</br>
	 * 3. 인증 정보를 SecurityContext에 저장.</br>
	 * </p>
	 * 인증이 정상적으로 처리되었다면 아래 코드를 해당 계정이 가지고있는 권한, UserDetailVo를 획득할 수 있습니다.
	 * <pre>
	 * <code>
	 * String role = ((List<GrantedAuthority>) SecurityContextHolder.getContext().getAuthentication().getAuthorities()).get(0).getAuthority();
	 * UserDetailVo userDetailVo = SecurityContextHolder.getContext().getAuthentication().getDetails();
	 * </code>
	 * </pre>
	 * @param id 사용자가 입력한 아이디
	 * @param pw 사용자가 입력한 패스워드
	 * @exception UsernameNotFoundException 입력한 ID로 DB 조회했을때 없을경우 발생하는 exception
	 * @exception BadCredentialsException 자격 증명에 실패시(비밀번호 불일치 등) 발생하는 exception
	 * @exception Exception
	 */
	 public void authenticateUser(String id, String pw, HttpServletRequest request) throws Exception {
		log.debug("authenticateUser() 시작");
		
		// 사용자 인증에 필요한 토큰 발행.
		UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(id, pw);
		token.setDetails(securityMapper.getUserDetailById(id));
		
		// 토큰을 바탕으로 인증 진행. (실패시 Exception 발생)
		Authentication authentication = authenticationManager.authenticate(token);
		
		// 세션교체. (세션 고정 보호)
		changeNewSession(request);
		
		// 인증 정보를 SecurityContext에 저장.
		SecurityContextHolder.getContext().setAuthentication(authentication);
		
		log.debug("authenticateUser() 끝");
	}
	
	/**
	 * 기존 세션을 만료하고 새로운 세션을 발급.
	 * @param request
	 * @return New HttpSession
	 */
	private void changeNewSession(HttpServletRequest request) {
		
		HttpSession session = request.getSession(false);
		
		if (session != null) 
			session.invalidate();
		
		session = request.getSession(true);
		session.setMaxInactiveInterval(60 * 60);
	}
	
	/**
	 * 사용자가 입력한 패스워드와 DB에 저장된 패스워드가 일치하는지 확인.
	 * @param password 사용자가 입력한 패스워드
	 * @param user 사용자의 정보
	 * @return 성공시 true, 실패시 false
	 */
	public boolean matchPassword(String password, User user) {
		log.debug("<== password: {}", password);
		
		boolean result = false;
		UserVo userVo;
		
		try {
			
			userVo = securityMapper.getUserById(user.getUsername());
			
		} catch (Exception e) {

			log.error("DB에러");
			e.printStackTrace();
			return result;
		}
		
		result = passwordEncoder.matches(password, userVo.getUserPw());
		
		log.debug("==> result: {}", result);
		return result;
	}
	
	/**
	 * DB에 저장된 비밀번호를 변경합니다.
	 * @param userVo 비밀번호를 변경할 계정정보와 변경할 비밀번호가 담긴 Vo
	 * @return 성공시 ture, 실패시 fail
	 */
	public boolean changePassword(UserVo userVo) {
		log.debug("<== {}", userVo.toString());
		
		boolean result = false;
		userVo.setUserPw(passwordEncoder.encode(userVo.getUserPw()));
		
		try {
			
			result = securityMapper.updatePassword(userVo) > 0 ? true : false;
			
		} catch (Exception e) {
			
			log.error("DB에러");
			e.printStackTrace();
		}
		
		log.debug("==> result: {}",  result);
		return result;
	}
	
	/**
	 * DB에 해당 계정이 존재하는지 확인.
	 * @param userId 찾으려는 계정 ID
	 * @return 있다면 1, 없다면 0, 오류발생시 -1
	 */
	public int isExistAccount(String userId) {
		log.debug("<== userId: {}", userId);
		
		int result = -1;
		
		try {
			
			result = securityMapper.getUserCountById(userId);
			
		} catch (Exception e) {

			log.error("DB에러");
			e.printStackTrace();
		}
		
		log.debug("==> result: {}", result);
		
		return result;
	}

	/**
	 * 사용자를 DB에 새로 저장
	 * @param userDetailVo 등록하려는 사용자 정보를 담은 Vo
	 * @return 성공시 true, 실패시 false
	 */
	public boolean registUser(UserDetailVo userDetailVo) {
		log.debug("<== {}", userDetailVo.toString());
		
		boolean result = false;
		userDetailVo.setUserPw(passwordEncoder.encode(userDetailVo.getUserPw()));
		
		try {
			
			result = securityMapper.insertUser(userDetailVo);
			
		} catch (Exception e) {

			log.error("DB실패");;
			e.printStackTrace();
		}
		
		log.debug("==> result: {}", result);
		return result;
	}
}
