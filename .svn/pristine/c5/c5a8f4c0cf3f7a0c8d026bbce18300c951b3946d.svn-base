package egovframework.ksdmWeb.admin.boardManagement.common.service.impl;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import egovframework.ksdmWeb.admin.boardManagement.common.service.AdminBoardService;
import egovframework.ksdmWeb.common.util.fileUpload.FileManager;
import egovframework.ksdmWeb.common.util.fileUpload.FilePathHolder;
import egovframework.ksdmWeb.common.vo.BoardVo;
import lombok.extern.slf4j.Slf4j;

@Service("adminBoardService")
@Slf4j
public class AdminBoardServiceImpl implements AdminBoardService {
	
	@Resource(name = "adminBoardMapper")
	private AdminBoardMapper adminBoardMapper;
	
	@Resource(name = "fileManager")
	private FileManager fileManager;
	
	@Override
	public Map<String, Object> boardRegistConfirm(BoardVo boardVo) {
		log.debug("boardRegistConfirm() 시작");

		Map<String, Object> result = new HashMap<String, Object>();
		MultipartFile file = boardVo.getFile();
		
		if (file != null) {
			
			boardVo.setAttachement(file.getOriginalFilename());
			
			String UploadedFileName = fileManager.fileUpload(file, FilePathHolder.BOARD_FILE_PATH);
			
			if (UploadedFileName == null) {
				
				result.put("result", "uploadFail");
				log.debug("boardRegistConfirm() 끝");
				return result;
			}
			
			boardVo.setAttachFilenm(UploadedFileName);
		}
		
		try {
			
			boardVo.setRegId(SecurityContextHolder.getContext().getAuthentication().getName());
			adminBoardMapper.insertBoard(boardVo);
			result.put("result", "success");
			
		} catch (Exception e) {

			result.put("result", "fail");
			log.error("DB에러");
			e.printStackTrace();
		}
		
		log.debug("boardRegistConfirm() 끝");
		return result;
	}

	@Override
	public int boardDeleteConfirm(BoardVo boardVo) {
		log.debug("boardDeleteConfirm() 시작");
		
		try {
			
			String fileName = boardVo.getAttachFilenm();
			if (fileName != null && !fileName.equals("")) {
				
				fileManager.deleteFileBySavedFileName(fileName);
			}
				
			adminBoardMapper.deleteBoard(boardVo);
			
		} catch (Exception e) {

			log.debug("글 삭제중 오류발생.");
			e.printStackTrace();
			log.debug("boardDeleteConfirm() 끝");
			return 0;
		}
		
		log.debug("boardDeleteConfirm() 끝");
		return 1;
	}

	@Override
	public Map<String, Object> boardModifyConfirm(BoardVo boardVo) {
		log.debug("boardModifyConfirm() 시작");
		
		Map<String, Object> result = new HashMap<String, Object>();
		MultipartFile file = boardVo.getFile();
		
		fileManager.deleteFileBySavedFileName(boardVo.getAttachFilenm());
		
		if (file != null && !file.getOriginalFilename().equals("")) {
			
			String savedFileName = fileManager.fileUpload(file, FilePathHolder.BOARD_FILE_PATH);
			boardVo.setAttachFilenm(savedFileName);
			
		} else {
			
			boardVo.setAttachFilenm(null);
		}
		
		try {
			
			boardVo.setModifyId(SecurityContextHolder.getContext().getAuthentication().getName());
			adminBoardMapper.updateBoard(boardVo);
			result.put("result", "success");
			
		} catch (Exception e) {
			
			log.error("DB에러");
			e.printStackTrace();
			result.put("result", "fail");
		}
		
		log.debug("boardModifyConfirm() 끝");
		return result;
	}
}
